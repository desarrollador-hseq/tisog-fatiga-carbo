// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Role {
  ADMIN
  LEADER
  USER
}

model City {
  id String @id @default(uuid())

  realName  String
  formatted String?

  drivers             Driver[]
  companies           Company[]
  fatigueSleepReports FatigueSleepReport[]

  active Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Position {
  id String @id @default(uuid())

  name String

  drivers Driver[]

  active Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id String @id @default(uuid())

  email String @unique

  name     String?
  numDoc     String?
  password String?

  role Role @default(USER)

  FatigueSleepReports FatigueSleepReport[]

  companyId String?
  company   Company? @relation(fields: [companyId], references: [id])

  active Boolean @default(true)

  isMaster Boolean @default(false)

  passwordResetTokens PasswordResetToken[]

  fatigueReportEvents FatigueReportEvent[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([companyId])
}

model PasswordResetToken {
  id      String    @id @default(uuid())
  token   String    @unique
  resetAt DateTime?

  userId String
  user   User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())

  @@index([userId])
}

model BusinessUnit {
  id String @id @default(uuid())

  name String

  companyId String

  active Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Company {
  id String @id @default(uuid())

  name String
  nit  String?

  cityId String?
  city   City?   @relation(fields: [cityId], references: [id])

  logoImgUrl String?

  logisticsCenters LogisticsCenter[]

  supervisors User[]
  drivers     Driver[]

  active Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([cityId])
}

model LogisticsCenter {
  id String @id @default(uuid())

  name String

  companyId String?
  company   Company? @relation(fields: [companyId], references: [id])

  active Boolean @default(true)

  fatigueSleepReports FatigueSleepReport[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([companyId])
}

model Driver {
  id String @id @default(uuid())

  fullname      String?
  numDoc        String?
  licenseNumber String?

  positionId String?
  position   Position? @relation(fields: [positionId], references: [id])

  reports FatigueSleepReport[]

  companyId String?
  company   Company? @relation(fields: [companyId], references: [id])

  cityId String?
  city   City?   @relation(fields: [cityId], references: [id])

  active Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([positionId])
  @@index([companyId])
  @@index([cityId])
}

enum FatigueSleepReportStatus {
  PENDING
  SEND
  CANCELLED
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
}

model FatigueSleepReport {
  id String @id @default(uuid())

  driverId String?
  driver   Driver? @relation(fields: [driverId], references: [id])

  logisticsCenterId String?
  logisticsCenter   LogisticsCenter? @relation(fields: [logisticsCenterId], references: [id])

  date DateTime?

  supervisorId String?
  supervisor   User?   @relation(fields: [supervisorId], references: [id])

  cityId String?
  city   City?   @relation(fields: [cityId], references: [id])

  symptoms                String? @db.Text
  sleepingHours           Int?
  sleepingHours48         Int?
  medicine                String? @db.Text
  signs                   String? @db.Text
  appearances             String? @db.Text
  moods                   String? @db.Text
  performances            String? @db.Text
  drivingModes            String? @db.Text
  strategy                String? @db.Text
  fatigueCauseDescription String? @db.Text

  riskLevel RiskLevel? @default(LOW)

  state FatigueSleepReportStatus @default(PENDING)

  active Boolean @default(true)

  fatigueReportEvents FatigueReportEvent[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([driverId])
  @@index([cityId])
  @@index([supervisorId])
  @@index([logisticsCenterId])
}

enum EventReportType {
  UPDATED
  CREATED
  SENT
  DELETED
}


model FatigueReportEvent{
  id              String    @id @default(uuid())
  eventType       EventReportType
  reportData String?   @db.Text

  fatigueReportId String
  fatiqueReport   FatigueSleepReport @relation(fields: [fatigueReportId], references: [id])

  userId String
  user   User? @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())

  @@index([fatigueReportId])
  @@index([userId])
}

model DefaultValue {
  id     String  @id @default(uuid())
  name   String
  desc   String?
  imgUrl String?

  parameterId String
  parameters  Parameter @relation(fields: [parameterId], references: [id])

  active Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([parameterId])
}

model Parameter {
  id String @id @default(uuid())

  name String @unique
  desc   String?

  defaultValues DefaultValue[]

  active Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
